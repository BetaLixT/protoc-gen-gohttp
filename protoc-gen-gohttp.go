// Package main entrypoint package
package main

import (
	"fmt"
	"strings"

	// "google.golang.org/genproto/googleapis/api/annotations"
	// "google.golang.org/genproto/googleapis/api/serviceconfig"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"techunicorn.com/protoc-gen-gocqrshttp/custom/annotations"
	"techunicorn.com/protoc-gen-gocqrshttp/generator"
	// "google.golang.org/protobuf/proto"
	// "google.golang.org/protobuf/runtime/protoimpl"
	// "google.golang.org/protobuf/types/descriptorpb"
	// "google.golang.org/protobuf/proto"
	// "google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if f.Generate {
				if err := generateFile(p, f); err != nil {
					return err
				}
			}
		}

		return nil
	})
}

func generateFile(
	plugin *protogen.Plugin,
	file *protogen.File,
) error {
	isGenerated := false
	for _, srv := range file.Services {
		for _, method := range srv.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			isGenerated = true
		}
	}

	if !isGenerated {
		return nil
	}
	plugin.SupportedFeatures = 1
	protojsonPackage := protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
	gofilename := file.GeneratedFilenamePrefix + ".http.go"
	gohttp := plugin.NewGeneratedFile(gofilename, file.GoImportPath)

	gohttp.P("// Code generated by protoc-gen-gohttp. DO NOT EDIT.")
	gohttp.P("// source: ", file.Desc.Path())
	gohttp.P()
	gohttp.P("package ", file.GoPackageName)
	gohttp.P("const InternalContextKey = \"inCxt\"")
	gohttp.P(
		"var protomarsh = ",
		protojsonPackage.Ident("MarshalOptions"),
		"{EmitUnpopulated: true}",
	)

	yamlfilename := file.GeneratedFilenamePrefix + ".http.yaml"
	openapi := plugin.NewGeneratedFile(yamlfilename, file.GoImportPath)

	openapi.P("# Code generated by protoc-gen-gohttp. DO NOT EDIT.")
	openapi.P("# source: ", file.Desc.Path())

	jsonfilename := file.GeneratedFilenamePrefix + ".http.json"
	openapijson := plugin.NewGeneratedFile(jsonfilename, file.GoImportPath)

	paths := map[string]struct{}{}
	srvs := []pkg.Server{}
	for _, srv := range file.Services {
		// if err := genService(g, srv); err != nil {
		// 	return err
		// }

		pths := []pkg.APIPath{}
		for _, rpc := range srv.Methods {

			var path string
			if strings.Contains(rpc.Input.GoIdent.GoName, "Command") {
				cmd := pkg.ToPrivateName(strings.TrimSuffix(rpc.Input.GoIdent.GoName, "Command"))
				path = "/commands/" + cmd
			} else if strings.Contains(rpc.Input.GoIdent.GoName, "Query") {
				cmd := pkg.ToPrivateName(strings.TrimSuffix(rpc.Input.GoIdent.GoName, "Query"))
				path = "/queries/" + cmd
			} else {
				return fmt.Errorf("non command/query model used as input %s", rpc.Input.GoIdent.GoName)
			}

			options, ok := rpc.Desc.Options().(*descriptorpb.MethodOptions)
			if !ok {
				return fmt.Errorf("documentation missing from rpc")
			}

			doc, ok := proto.GetExtension(options, annotations.E_Documentation).(*annotations.Documentation)
			if !ok {
				return fmt.Errorf("documentation missing from rpc")
			}

			pths = append(pths, pkg.APIPath{
				Method:      rpc,
				Path:        path,
				Summary:     doc.Summary,
				Description: doc.Description,
				Tags:        doc.Tags,
				HTTPMethod:  "POST",
			})
		}
		srvs = append(srvs, pkg.Server{
			Service: srv,
			Paths:   pths,
		})
	}

	err := pkg.GenerateHTTPServers(srvs, gohttp, file)
	if err != nil {
		return err
	}

	return pkg.GenerateOpenAPI(srvs, openapi, openapijson, file)
}
